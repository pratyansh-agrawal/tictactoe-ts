{"version":3,"sources":["components/BoxGrid.tsx","components/WidgetBar.tsx","components/Modal.tsx","components/BasePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxGrid","stepNumber","setStepNumber","isReset","setShouldShowWinnerModal","useEffect","setValues","Array","fill","setIsGameComplete","EmptyBox","className","CrossIcon","CircleIcon","useState","showIcon","setShowIcon","values","isGameComplete","winCombinations","getIcon","index","Box","onClick","tempArr","setBoxValue","i","length","line","indexA","indexB","indexC","markValue","state","winner","checkForWinner","map","x","WidgetBar","setIsReset","Modal","forwardRef","ref","title","onClose","testId","children","isOpened","isVisible","setVisible","setTimeout","openModal","document","body","classList","add","remove","backdropClasses","modalClasses","closeModal","onTransitionEnd","data-testid","BasePage","shouldShowWinnerModal","resultIconClasses","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7751d4be.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GiCrossMark, GiCircleClaws } from \"react-icons/gi\";\n\ninterface BoxGridProps {\n    stepNumber: number;\n    setStepNumber: (counter: number) => void;\n    isReset: boolean;\n    setShouldShowWinnerModal: (props: { state: boolean, winner: number | null }) => void;\n}\n\ninterface BoxProps {\n    index: number\n}\n\nexport const BoxGrid: React.FC<BoxGridProps> = ({\n    stepNumber,\n    setStepNumber,\n    isReset,\n    setShouldShowWinnerModal\n}: BoxGridProps) => {\n\n    useEffect(() => {\n        setValues(Array(9).fill(0));\n        setIsGameComplete(false);\n    }, [isReset]);\n\n    const EmptyBox: React.FC = () => {\n        return <div className=\"bg-gray-200\"></div>;\n    }\n\n    const CrossIcon: React.FC = () => {\n        return <div className=\"p-2 text-yellow-400\">\n            <GiCrossMark className=\"h-full w-full\" />\n        </div>;\n    }\n\n    const CircleIcon: React.FC = () => {\n        return <div className=\"p-2 h-full w-full text-yellow-400\">\n            <GiCircleClaws className=\"h-full w-full\" />\n        </div>;\n    }\n    const [showIcon, setShowIcon] = useState<boolean>(false);\n    const [values, setValues] = useState<number[]>(Array(9).fill(0));\n    const [isGameComplete, setIsGameComplete] = useState<boolean>(false);\n\n\n    const winCombinations = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    const checkForWinner = () => {\n        for (let i = 0; i < winCombinations.length; i++) {\n            let line = winCombinations[i];\n            const [indexA, indexB, indexC]: number[] = line;\n            const markValue = values[indexA];\n\n            if (markValue && markValue === values[indexB] && markValue === values[indexC]) {\n                //Winner Winner Chicken Dinner\n\n                setShouldShowWinnerModal({state: true, winner: markValue});\n                setIsGameComplete(true);\n            }\n        }\n    };\n\n    const getIcon = (index: number) => {\n        switch (index) {\n            case 0: return <EmptyBox />;\n            case 1: return <CrossIcon />;\n            case 2: return <CircleIcon />;\n        }\n    }\n\n\n    const setBoxValue = (index: number) => {\n        let tempArr = values;\n        tempArr[index] = stepNumber % 2 === 0 ? 2 : 1;\n        setValues(tempArr);\n    };\n\n    const Box: React.FC<BoxProps> = ({ index }: BoxProps) => {\n        return (\n            <div\n                className=\"bg-white h-20 w-20 shadow-lg cursor-pointer\"\n                onClick={() => {\n                    if (values[index] === 0 && !isGameComplete) {\n                        setBoxValue(index);\n                        setShowIcon(true);\n                        setStepNumber(stepNumber + 1);\n                        checkForWinner();\n                    }\n                    if (stepNumber >= 9) {\n                        setShouldShowWinnerModal({state: true, winner: null});\n                        setIsGameComplete(true);\n                    }\n                }}\n\n            >\n                {showIcon && getIcon(values[index])}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"grid grid-cols-3 grid-rows-3 gap-4\">\n            {[...Array(9)].map((x, index) => (\n                <div key={`box-${index}`}>\n                    <Box index={index} />\n                </div>\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\n\ninterface WidgetBarProps {\n  setIsReset: (flag: boolean) => void;\n}\n\nexport const WidgetBar: React.FC<WidgetBarProps> = ({\n  setIsReset,\n}: WidgetBarProps) => {\n  return (\n    <div className=\"bg-white cursor-pointer p-2 shadow-lg font-medium rounded\" onClick={() => setIsReset(true)}>\n      RESET\n    </div>\n  );\n};\n","import React, {\n    useState,\n    forwardRef,\n    ReactNode,\n    useEffect\n} from \"react\";\n\ninterface ModalProps {\n    title?: string;\n    children: ReactNode;\n    onClose?: () => void;\n    testId?: string;\n    isOpened: boolean;\n}\nconst Modal = forwardRef(\n    ({ title, onClose, testId, children, isOpened }: ModalProps, ref: any) => {\n        const [isVisible, setVisible] = useState(false);\n        useEffect(() => {\n            if (isOpened) {\n                setTimeout(() => {\n                    openModal();\n                }, 10);\n                document.body.classList.add(\"overflow-hidden\");\n            }\n            return () => {\n                document.body.classList.remove(\"overflow-hidden\");\n            };\n        }, [isOpened]);\n        const wrapperClasses = (\n            \"fixed flex items-center justify-around w-full h-full top-0 left-0 right-0 bottom-0 z-998 overflow-y-auto\"\n        );\n        const backdropClasses = (\n            `modal-backdrop transition-opacity ${isVisible ? \"opacity-1\" : \"opacity-0\"} fixed inset-0 z-999 bg-black opacity-60 duration-300 transition-opacity backdrop-blur`\n        );\n        /* purgecss: bg-white  bg-dark-7 text-white text-dark-8*/\n        const modalClasses = (`\n             absolute rounded-lg z-1000 sm:my-90p duration-100 transition-all ${isVisible ? \"opacity-1\" : \"opacity-0 transform-y-40p\"} bg-gray-200`);\n\n\n        const closeModal = (): void => {\n            setVisible(false);\n            onClose && onClose();\n        };\n       \n\n        const openModal = (): void => {\n            setVisible(true);\n        };\n\n        const handleTransitionEnd = (): void => {\n            if (!isVisible) {\n                closeModal();\n            }\n        };\n        return isOpened ? (\n            <div className={wrapperClasses}>\n                <div className={backdropClasses} onClick={closeModal} />\n                <div\n                    className={modalClasses}\n                    onTransitionEnd={handleTransitionEnd}\n                    data-testid={testId}\n                >\n                    <div className=\"relative px-20 py-5 font-bold text-black\">\n                        {title && (\n                            <h2\n                                data-testid={`modal-heading`}\n                                className={`text-22 sm:text-26 font-semibold tracking-3 text-black`}\n                            >\n                                {title}\n                            </h2>\n                        )}\n                    </div>\n                    {children}\n                </div>\n            </div>\n        ) : null;\n    }\n);\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\nimport { BoxGrid } from \"./BoxGrid\";\nimport { WidgetBar } from \"./WidgetBar\";\nimport Modal from \"./Modal\";\nimport { FaGamepad, FaGrinStars } from \"react-icons/fa\";\nexport interface WinnerModalProps {\n    state: boolean;\n    winner: number | null;\n}\n\nexport const BasePage = () => {\n    const [stepNumber, setStepNumber] = useState<number>(0);\n    const [isReset, setIsReset] = useState<boolean>(false);\n    const [shouldShowWinnerModal, setShouldShowWinnerModal] =\n        useState<WinnerModalProps>({ state: false, winner: null });\n\n    useEffect(() => {\n        setStepNumber(1);\n        setIsReset(false);\n    }, [isReset]);\n\n    const resultIconClasses = `h-12 w-12 text-yellow-400`;\n\n    return (\n        <div className=\"h-screen w-screen bg-yellow-400\">\n            <div className=\"flex flex-col pt-20 h-full w-full\">\n                <div className=\"text-white font-bold text-4xl text-center mb-12\">\n                    Tic-Tac-Toe\n        </div>\n\n                <div className=\"max-h-400p self-center mb-12\">\n                    <BoxGrid\n                        stepNumber={stepNumber}\n                        setStepNumber={setStepNumber}\n                        isReset={isReset}\n                        setShouldShowWinnerModal={setShouldShowWinnerModal}\n                    />\n                </div>\n\n                <div className=\"self-center\">\n                    <WidgetBar setIsReset={setIsReset} />\n                </div>\n            </div>\n            <div className=\"center\">\n                {shouldShowWinnerModal.state && (\n                    <Modal\n                        title={shouldShowWinnerModal.winner ? \"WINNERRR\" : \"MATCH TIED\"}\n                        ref={undefined}\n                        onClose={() =>\n                            setShouldShowWinnerModal({ state: false, winner: null })\n                        }\n                        isOpened={shouldShowWinnerModal.state}\n                    >\n                        <div className=\"text-center flex flex-col justify-evenly p-5\">\n                            <div className=\"flex flex-row justify-around mb-6\">\n                                {shouldShowWinnerModal.winner ? (\n                                    <FaGrinStars className={resultIconClasses} />\n                                ) : (\n                                    <FaGamepad className={resultIconClasses} />\n                                )}\n                                \n                                {shouldShowWinnerModal.winner && (\n                                    <div className=\"font-medium pt-2.5\">\n                                        {shouldShowWinnerModal.winner === 1 ? \"X Won\" : \"O Won\"}\n                                    </div>\n                                    )\n                                }\n                            </div>\n                            <div\n                                className=\"self-end p-2 bg-gray-300 rounded cursor-pointer\"\n                                onClick={() => {\n                                    setIsReset(true);\n                                    setShouldShowWinnerModal({ state: false, winner: null });\n                                    setStepNumber(1);\n                                }}\n                            >\n                                Restart\n                </div>\n                        </div>\n                    </Modal>\n                )}\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\n\nimport {BasePage} from \"./components/BasePage\";\n\nfunction App() {\n  return (\n    <BasePage />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}